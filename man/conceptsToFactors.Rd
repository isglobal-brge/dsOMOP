% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/10_types.R
\name{conceptsToFactors}
\alias{conceptsToFactors}
\title{Convert Concept ID Columns to Factors}
\usage{
conceptsToFactors(table)
}
\arguments{
\item{table}{A data frame containing one or more columns with "concept_id" in their names.
The columns can be of any type that can be converted to factors.}
}
\value{
A data frame with all concept ID columns converted to factors. All other
columns remain unchanged.
}
\description{
Converts original concept ID columns in a data frame to factors, while preserving
the data types of fallback columns created during concept translation failures.
This ensures proper handling of both translated and untranslated concept data.
}
\details{
Convert Concept ID Columns to Factors in the Table

The function applies intelligent logic to determine which columns should be converted to factors:

Conversion Rules:
\itemize{
\item Columns ending with "_concept_id" are converted to factors
\item Exception: Simple numeric fallback patterns like "concept_id_123" are preserved as numeric
}

Examples of conversion behavior:
\itemize{
\item "condition_concept_id" -> factor (standard OMOP concept column)
\item "concept_id_123" -> numeric (simple fallback, preserve original type)
\item "concept_id_123.value_as_concept_id" -> factor (ends with _concept_id)
\item "concept_id_123.value_as_number" -> numeric (does not end with _concept_id)
\item "blood_pressure.value_as_concept_id" -> factor (ends with _concept_id)
\item "blood_pressure.value_as_number" -> numeric (does not end with _concept_id)
}

This ensures that concept identifier columns maintain factor type for proper statistical
analysis, while preserving numeric data types for measurement values created during
the concept translation fallback mechanism.

Common Use Cases:
\itemize{
\item Standardizing original concept ID columns after data import
\item Preparing data for statistical analysis while preserving numeric fallback columns
\item Ensuring consistent data types across concept identifiers without breaking numeric data
}
}
\examples{
\dontrun{
# Example demonstrating conversion rules
data <- data.frame(
  person_id = 1:3,
  condition_concept_id = c(1234, 5678, 1234),                      # -> factor (ends with _concept_id)
  concept_id_123 = c(1.5, 2.3, 3.1),                               # -> numeric (simple fallback pattern)
  concept_id_123.value_as_concept_id = c("A", "B", "C"),           # -> factor (ends with _concept_id)
  concept_id_123.value_as_number = c(10.1, 20.2, 30.3),            # -> numeric (ends with _as_number)
  blood_pressure.value_as_concept_id = c("normal", "hypertension", # -> factor (ends with _concept_id)
                                         "hypotension"),            
  blood_pressure.value_as_number = c(120.0, 180.5, 90.2)           # -> numeric (ends with _as_number)
)

result <- conceptsToFactors(data)
# Only columns ending with "_concept_id" become factors
# Simple numeric fallback patterns like "concept_id_123" remain numeric
}

}
